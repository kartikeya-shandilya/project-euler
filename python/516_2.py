
from math import log
from bisect import bisect_left


def max_primepow(n, prime):
    if prime > 5:
        return 1
    if n < prime:
        return 0
    return int(log(n)/log(prime))


myprimes = [2, 3, 5, 7, 11, 13, 17, 19, 31, 37, 41, 61, 73, 97, 101, 109, 151, 163, 181, 193, 241, 251, 257, 271, 401, 433, 487, 541, 577, 601, 641, 751, 769, 811, 1153, 1201, 1297, 1459, 1601, 1621, 1801, 2161, 2251, 2593, 2917, 3001, 3457, 3889, 4001, 4051, 4801, 4861, 6481, 7681, 8101, 8641, 9001, 9601, 9721, 10369, 11251, 12289, 14401, 15361, 16001, 17497, 18433, 19441, 21601, 21871, 22501, 23041, 24001, 25601, 32401, 33751, 36451, 37501, 39367, 40961, 43201, 52489, 54001, 57601, 58321, 61441, 62501, 65537, 72901, 76801, 77761, 81001, 87481, 90001, 96001, 103681, 112501, 115201, 121501, 131221, 138241, 139969, 147457, 150001, 155521, 160001, 163841, 172801, 180001, 184321, 196831, 209953, 259201, 270001, 281251, 307201, 311041, 328051, 331777, 345601, 384001, 405001, 414721, 432001, 437401, 450001, 466561, 472393, 506251, 562501, 576001, 629857, 737281, 746497, 786433, 839809, 900001, 921601, 937501, 972001, 995329, 1125001, 1166401, 1179649, 1350001, 1492993, 1620001, 1769473, 1822501, 1843201, 1920001, 1968301, 1990657, 2073601, 2099521, 2160001, 2400001, 2654209, 2799361, 3037501, 3072001, 3456001, 3600001, 3686401, 3750001, 4218751, 4374001, 4423681, 4723921, 5038849, 5184001, 5308417, 5314411, 5400001, 5904901, 6144001, 6561001, 6635521, 6750001, 6998401, 7290001, 8201251, 8503057, 8640001, 8748001, 9375001, 10125001, 10497601, 11059201, 11337409, 12150001, 12441601, 12597121, 12656251, 13122001, 13668751, 14155777, 15552001, 16384001, 16588801, 16796161, 17496001, 17714701, 18750001, 19131877, 20995201, 21600001, 22118401, 24000001, 24576001, 25312501, 26214401, 27993601, 28125001, 28311553, 28800001, 29524501, 30000001, 30375001, 31492801, 33177601, 35389441, 40960001, 41990401, 48600001, 49152001, 54675001, 55987201, 57395629, 62500001, 63700993, 65610001, 71663617, 73811251, 76800001, 81000001, 82012501, 83980801, 86093443, 88573501, 92160001, 93312001, 99532801, 101250001, 102036673, 104857601, 105468751, 113246209, 113906251, 117964801, 120932353, 124416001, 129600001, 132710401, 141557761, 144000001, 145800001, 149299201, 150000001, 162000001, 167772161, 169869313, 170061121, 175781251, 177147001, 179159041, 189843751, 212576401, 226748161, 238878721, 245760001, 253125001, 256000001, 258280327, 265420801, 265720501, 273375001, 281250001, 288000001, 307200001, 331776001, 377487361, 409600001, 410062501, 414720001, 432000001, 460800001, 466560001, 468750001, 478296901, 483729409, 573956281, 600000001, 614400001, 615093751, 637009921, 637729201, 655360001, 725594113, 746496001, 754974721, 786432001, 860934421, 864000001, 874800001, 885735001, 937500001, 943718401, 956593801, 984150001, 1036800001, 1049760001, 1088391169, 1119744001, 1125000001, 1133740801, 1194393601, 1399680001, 1415577601, 1492992001, 1500000001, 1536000001, 1572864001, 1749600001, 1811939329, 1843200001, 1889568001, 2013265921, 2187000001, 2239488001, 2304000001, 2361960001, 2441406251, 2500000001, 2519424001, 2717908993, 2869781401, 2916000001, 2949120001, 2952450001, 3110400001, 3164062501, 3221225473, 3224862721, 3280500001, 3439853569, 3587226751, 3645000001, 3796875001, 3874204891, 3936600001, 4050000001, 4076863489, 4194304001, 4218750001, 4687500001, 4782969001, 4915200001, 5125781251, 5165606521, 5273437501, 5535843751, 5898240001, 6000000001, 6298560001, 6561000001, 6802444801, 6834375001, 6879707137, 6912000001, 7962624001, 8162933761, 8542968751, 8789062501, 9000000001, 9331200001, 9375000001, 9447840001, 9600000001, 10485760001, 10616832001, 10871635969, 11466178561, 11609505793, 11664000001, 11943936001, 13183593751, 13604889601, 13996800001, 14155776001, 14400000001, 14511882241, 14929920001, 15305500801, 15496819561, 16384000001, 16875000001, 17006112001, 17714700001, 17915904001, 18000000001, 18345885697, 18874368001, 18984375001, 20384317441, 20407334401, 20503125001, 21523360501, 22781250001, 22958251201, 23245229341, 23437500001, 23619600001, 23914845001, 24159191041, 24300000001, 25165824001, 25312500001, 26873856001, 28697814001, 29386561537, 30000000001, 30720000001, 30754687501, 32285040751, 32651735041, 33215062501, 33973862401, 34560000001, 36450000001, 36864000001, 38220595201, 39550781251, 41472000001, 42515280001, 42998169601, 43945312501, 45298483201, 45562500001, 47775744001, 47829690001, 48000000001, 48372940801, 51840000001, 55099802881, 56953125001, 63700992001, 64497254401, 66355200001, 69657034753, 69984000001, 74649600001, 75000000001, 76441190401, 76800000001, 77309411329, 82012500001, 85030560001, 85996339201, 87890625001, 88473600001, 91729428481, 94371840001, 96855122251, 97656250001, 105468750001, 116095057921, 117964800001, 122305904641, 123834728449, 129600000001, 132710400001, 137749507201, 138240000001, 140625000001, 141717600001, 144955146241, 151875000001, 153773437501, 154968195601, 163258675201, 165888000001, 169869312001, 171992678401, 174339220051, 174960000001, 177147000001, 183458856961, 187500000001, 191318760001, 194400000001, 206158430209, 209952000001, 213574218751, 226492416001, 235929600001, 251048476873, 269042006251, 276480000001, 289910292481, 292968750001, 294912000001, 306110016001, 309586821121, 311040000001, 313810596091, 314928000001, 337500000001, 344373768001, 347892350977, 384000000001, 390625000001, 402653184001, 407686348801, 409600000001, 424673280001, 425152800001, 430467210001, 447897600001, 461320312501, 464904586801, 466560000001, 474609375001, 498225937501, 512578125001, 549316406251, 562500000001, 573308928001, 576000000001, 580475289601, 619872782401, 679477248001, 711914062501, 716636160001, 720000000001, 816293376001, 820125000001, 825564856321, 829440000001, 836828256241, 864000000001, 871696100251, 880602513409, 922640625001, 966367641601, 967458816001]


def merge_sort(a, b):
    result = []
    while len(a) and len(b):
        elm = min(a[0], b[0])
        if a[0] < b[0]:
            a.pop(0)
        elif b[0] < a[0]:
            b.pop(0)
        else:
            a.pop(0)
            b.pop(0)
        result.append(elm)
    if len(a):
        result += a
    elif len(b):
        result += b
    return result


def gen_5sm_admissible(n, admiss=[1], max_idx=3):
    primeidx = 0
    while primeidx < max_idx and myprimes[primeidx] < n:
        prime = myprimes[primeidx]
        elmidx = 0
        freshadmiss = []
        while (elmidx <= len(admiss)-1) and (admiss[elmidx]*prime < n):
            base = admiss[elmidx]
            max_pow = max_primepow(n/base, prime)
            newadmiss = [base*prime**i for i in xrange(1, max_pow+1)]
            freshadmiss = merge_sort(freshadmiss, newadmiss)
            elmidx += 1
        admiss = merge_sort(admiss, freshadmiss)
        primeidx += 1
    return admiss


def gen_admissible(n, admiss_5sm=[1]):
    primeidx = 3
    while primeidx < len(myprimes)-1 and myprimes[primeidx] < n:
        prime = myprimes[primeidx]
        find = int(n/prime)+1
        if find == 1:
            max_idx = 0
        else:
            max_idx = bisect_left(admiss_5sm, find)
        newadmiss = map(lambda x: x*prime, admiss_5sm[:max_idx])
        admiss_5sm = merge_sort(admiss_5sm, newadmiss)
        primeidx += 1
    return admiss_5sm


n = 10**6
#admiss_5sm = gen_5sm_admissible(n, [1], max_idx=len(myprimes)-1)
#print sum(admiss_5sm)

admiss_5sm = gen_5sm_admissible(n, [1], max_idx=3)
all_admiss = gen_admissible(n, admiss_5sm)
print sum(all_admiss)
